import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Coins, TrendingUp, Clock, Zap, Plus, Minus } from 'lucide-react';
import { toast } from 'sonner';

export default function Staking() {
  const [stakeAmount, setStakeAmount] = useState('');
  const [selectedPool, setSelectedPool] = useState<string | null>(null);

  const stakingPools = [
    {
      id: 'btc-pool',
      name: 'Bitcoin Staking',
      symbol: 'BTC',
      apy: 8.5,
      minStake: 0.001,
      lockPeriod: '30 days',
      totalStaked: '1,250 BTC',
      status: 'active',
      risk: 'low'
    },
    {
      id: 'eth-pool',
      name: 'Ethereum 2.0',
      symbol: 'ETH',
      apy: 12.3,
      minStake: 0.1,
      lockPeriod: '60 days',
      totalStaked: '8,450 ETH',
      status: 'active',
      risk: 'medium'
    },
    {
      id: 'ada-pool',
      name: 'Cardano Staking',
      symbol: 'ADA',
      apy: 15.7,
      minStake: 100,
      lockPeriod: '14 days',
      totalStaked: '2.5M ADA',
      status: 'active',
      risk: 'medium'
    },
    {
      id: 'sol-pool',
      name: 'Solana Staking',
      symbol: 'SOL',
      apy: 18.2,
      minStake: 1,
      lockPeriod: '7 days',
      totalStaked: '45K SOL',
      status: 'active',
      risk: 'high'
    }
  ];

  const userStakes = [
    {
      id: '1',
      pool: 'Bitcoin Staking',
      amount: '0.5 BTC',
      value: '$24,265',
      apy: 8.5,
      earned: '0.0125 BTC',
      earnedValue: '$606.63',
      startDate: '2024-01-15',
      endDate: '2024-02-14',
      status: 'active'
    },
    {
      id: '2',
      pool: 'Ethereum 2.0',
      amount: '2.5 ETH',
      value: '$8,114.50',
      apy: 12.3,
      earned: '0.087 ETH',
      earnedValue: '$282.37',
      startDate: '2024-01-10',
      endDate: '2024-03-10',
      status: 'active'
    }
  ];

  const handleStake = () => {
    if (!selectedPool || !stakeAmount) {
      toast.error('Please select a pool and enter stake amount');
      return;
    }

    const pool = stakingPools.find(p => p.id === selectedPool);
    if (!pool) return;

    if (parseFloat(stakeAmount) < pool.minStake) {
      toast.error(`Minimum stake amount is ${pool.minStake} ${pool.symbol}`);
      return;
    }

    toast.success(`Successfully staked ${stakeAmount} ${pool.symbol} in ${pool.name}`);
    setStakeAmount('');
    setSelectedPool(null);
  };

  const handleUnstake = (stakeId: string) => {
    toast.success('Unstaking request submitted. Funds will be available after lock period.');
  };

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case 'low': return 'bg-green-500/20 text-green-400';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400';
      case 'high': return 'bg-red-500/20 text-red-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Stake Manager</h1>
          <p className="text-gray-300">Earn passive income by staking your cryptocurrencies</p>
        </div>

        {/* Staking Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card className="bg-gray-800/50 border-gray-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Total Staked</p>
                  <p className="text-2xl font-bold text-white">$32,379.50</p>
                  <p className="text-green-400 text-sm">+5.2% this month</p>
                </div>
                <Coins className="w-8 h-8 text-blue-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Total Rewards</p>
                  <p className="text-2xl font-bold text-white">$889.00</p>
                  <p className="text-green-400 text-sm">+$45.20 today</p>
                </div>
                <TrendingUp className="w-8 h-8 text-green-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Avg APY</p>
                  <p className="text-2xl font-bold text-white">10.4%</p>
                  <p className="text-blue-400 text-sm">Across all pools</p>
                </div>
                <Zap className="w-8 h-8 text-yellow-400" />
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Available Staking Pools */}
          <Card className="bg-gray-800/50 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white">Available Staking Pools</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {stakingPools.map((pool) => (
                  <div 
                    key={pool.id}
                    className={`p-4 rounded-lg border cursor-pointer transition-all ${
                      selectedPool === pool.id 
                        ? 'border-blue-500 bg-blue-500/10' 
                        : 'border-gray-600 hover:border-gray-500'
                    }`}
                    onClick={() => setSelectedPool(pool.id)}
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                          <span className="text-white font-bold text-sm">{pool.symbol}</span>
                        </div>
                        <div>
                          <h3 className="text-white font-semibold">{pool.name}</h3>
                          <p className="text-gray-400 text-sm">{pool.symbol}</p>
                        </div>
                      </div>
                      <Badge className={getRiskColor(pool.risk)}>
                        {pool.risk} risk
                      </Badge>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <p className="text-gray-400">APY</p>
                        <p className="text-green-400 font-bold">{pool.apy}%</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Lock Period</p>
                        <p className="text-white">{pool.lockPeriod}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Min Stake</p>
                        <p className="text-white">{pool.minStake} {pool.symbol}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Total Staked</p>
                        <p className="text-white">{pool.totalStaked}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Stake Form */}
              {selectedPool && (
                <div className="mt-6 p-4 bg-gray-700/50 rounded-lg">
                  <h4 className="text-white font-semibold mb-4">Stake in {stakingPools.find(p => p.id === selectedPool)?.name}</h4>
                  <div className="space-y-4">
                    <div>
                      <label className="text-gray-400 text-sm">Amount to Stake</label>
                      <Input
                        type="number"
                        placeholder={`Min: ${stakingPools.find(p => p.id === selectedPool)?.minStake}`}
                        value={stakeAmount}
                        onChange={(e) => setStakeAmount(e.target.value)}
                        className="bg-gray-600 border-gray-500 text-white mt-1"
                      />
                    </div>
                    <Button onClick={handleStake} className="w-full bg-blue-600 hover:bg-blue-700">
                      <Plus className="w-4 h-4 mr-2" />
                      Stake Now
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* My Stakes */}
          <Card className="bg-gray-800/50 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white">My Stakes</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {userStakes.map((stake) => (
                  <div key={stake.id} className="p-4 bg-gray-700/50 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-white font-semibold">{stake.pool}</h3>
                      <Badge className="bg-green-500/20 text-green-400">
                        {stake.status}
                      </Badge>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                      <div>
                        <p className="text-gray-400">Staked Amount</p>
                        <p className="text-white font-medium">{stake.amount}</p>
                        <p className="text-gray-400 text-xs">{stake.value}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Rewards Earned</p>
                        <p className="text-green-400 font-medium">{stake.earned}</p>
                        <p className="text-gray-400 text-xs">{stake.earnedValue}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">APY</p>
                        <p className="text-white">{stake.apy}%</p>
                      </div>
                      <div>
                        <p className="text-gray-400">End Date</p>
                        <p className="text-white">{stake.endDate}</p>
                      </div>
                    </div>

                    <div className="flex space-x-2">
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-gray-600 text-gray-300"
                        onClick={() => handleUnstake(stake.id)}
                      >
                        <Minus className="w-4 h-4 mr-1" />
                        Unstake
                      </Button>
                      <Button size="sm" className="bg-green-600 hover:bg-green-700">
                        Claim Rewards
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
