import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { 
  Send, 
  Paperclip, 
  Smile, 
  Phone, 
  Video, 
  MoreVertical,
  ArrowLeft,
  Clock,
  CheckCheck,
  Headphones
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';

interface Message {
  id: string;
  sender: 'user' | 'support';
  message: string;
  timestamp: string;
  status: 'sent' | 'delivered' | 'read';
  type: 'text' | 'image' | 'file';
}

export default function Support() {
  const navigate = useNavigate();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      sender: 'support',
      message: 'Hello! Welcome to TradePay Global support. How can I help you today?',
      timestamp: '10:30 AM',
      status: 'read',
      type: 'text'
    },
    {
      id: '2',
      sender: 'user',
      message: 'Hi, I have a question about my recent investment plan.',
      timestamp: '10:32 AM',
      status: 'read',
      type: 'text'
    },
    {
      id: '3',
      sender: 'support',
      message: 'I\'d be happy to help you with your investment plan. Could you please provide me with your investment ID or tell me which plan you\'re referring to?',
      timestamp: '10:33 AM',
      status: 'read',
      type: 'text'
    },
    {
      id: '4',
      sender: 'user',
      message: 'It\'s the Gold Plan I invested in yesterday. Investment ID: INV1234567',
      timestamp: '10:35 AM',
      status: 'delivered',
      type: 'text'
    },
    {
      id: '5',
      sender: 'support',
      message: 'Thank you for providing the details. I can see your Gold Plan investment. What specific question do you have about it?',
      timestamp: '10:36 AM',
      status: 'sent',
      type: 'text'
    }
  ]);
  
  const [newMessage, setNewMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = () => {
    if (newMessage.trim()) {
      const message: Message = {
        id: Date.now().toString(),
        sender: 'user',
        message: newMessage,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        status: 'sent',
        type: 'text'
      };
      
      setMessages(prev => [...prev, message]);
      setNewMessage('');
      
      // Simulate support response
      setIsTyping(true);
      setTimeout(() => {
        const supportMessage: Message = {
          id: (Date.now() + 1).toString(),
          sender: 'support',
          message: 'Thank you for your message. Let me check that for you right away.',
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
          status: 'read',
          type: 'text'
        };
        setMessages(prev => [...prev, supportMessage]);
        setIsTyping(false);
      }, 2000);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'sent':
        return <Clock className="w-3 h-3 text-gray-400" />;
      case 'delivered':
        return <CheckCheck className="w-3 h-3 text-gray-400" />;
      case 'read':
        return <CheckCheck className="w-3 h-3 text-blue-400" />;
      default:
        return null;
    }
  };

  return (
    <div className="h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex flex-col">
      {/* Header */}
      <div className="bg-gray-800/50 backdrop-blur-sm border-b border-gray-700 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate('/')}
              className="text-gray-300 hover:text-white"
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>
            
            <div className="flex items-center space-x-3">
              <Avatar className="w-10 h-10">
                <AvatarImage src="" alt="Support" />
                <AvatarFallback className="bg-gradient-to-r from-green-500 to-blue-500 text-white">
                  <Headphones className="w-5 h-5" />
                </AvatarFallback>
              </Avatar>
              <div>
                <h3 className="text-white font-semibold">TradePay Support</h3>
                <p className="text-green-400 text-sm flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                  Online - Usually replies instantly
                </p>
              </div>
            </div>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button variant="ghost" size="sm" className="text-gray-300 hover:text-white">
              <Phone className="w-5 h-5" />
            </Button>
            <Button variant="ghost" size="sm" className="text-gray-300 hover:text-white">
              <Video className="w-5 h-5" />
            </Button>
            <Button variant="ghost" size="sm" className="text-gray-300 hover:text-white">
              <MoreVertical className="w-5 h-5" />
            </Button>
          </div>
        </div>
      </div>

      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div className={`flex items-end space-x-2 max-w-xs lg:max-w-md ${message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
              {message.sender === 'support' && (
                <Avatar className="w-8 h-8">
                  <AvatarFallback className="bg-gradient-to-r from-green-500 to-blue-500 text-white text-xs">
                    <Headphones className="w-4 h-4" />
                  </AvatarFallback>
                </Avatar>
              )}
              
              <div
                className={`rounded-2xl px-4 py-2 ${
                  message.sender === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-700 text-white'
                }`}
              >
                <p className="text-sm">{message.message}</p>
                <div className={`flex items-center justify-between mt-1 ${message.sender === 'user' ? 'flex-row-reverse' : ''}`}>
                  <span className="text-xs opacity-70">{message.timestamp}</span>
                  {message.sender === 'user' && (
                    <div className="ml-2">
                      {getStatusIcon(message.status)}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
        
        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="flex items-end space-x-2">
              <Avatar className="w-8 h-8">
                <AvatarFallback className="bg-gradient-to-r from-green-500 to-blue-500 text-white text-xs">
                  <Headphones className="w-4 h-4" />
                </AvatarFallback>
              </Avatar>
              <div className="bg-gray-700 rounded-2xl px-4 py-2">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Message Input */}
      <div className="bg-gray-800/50 backdrop-blur-sm border-t border-gray-700 p-4">
        <div className="flex items-center space-x-3">
          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
            <Paperclip className="w-5 h-5" />
          </Button>
          
          <div className="flex-1 relative">
            <Input
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your message..."
              className="bg-gray-700 border-gray-600 text-white pr-12"
            />
            <Button
              variant="ghost"
              size="sm"
              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
            >
              <Smile className="w-4 h-4" />
            </Button>
          </div>
          
          <Button
            onClick={handleSendMessage}
            disabled={!newMessage.trim()}
            className="bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
        
        {/* Quick Actions */}
        <div className="flex flex-wrap gap-2 mt-3">
          <Badge 
            variant="outline" 
            className="cursor-pointer hover:bg-gray-700 text-gray-300 border-gray-600"
            onClick={() => setNewMessage('I need help with my investment')}
          >
            Investment Help
          </Badge>
          <Badge 
            variant="outline" 
            className="cursor-pointer hover:bg-gray-700 text-gray-300 border-gray-600"
            onClick={() => setNewMessage('How do I withdraw funds?')}
          >
            Withdrawal
          </Badge>
          <Badge 
            variant="outline" 
            className="cursor-pointer hover:bg-gray-700 text-gray-300 border-gray-600"
            onClick={() => setNewMessage('Account verification')}
          >
            Verification
          </Badge>
          <Badge 
            variant="outline" 
            className="cursor-pointer hover:bg-gray-700 text-gray-300 border-gray-600"
            onClick={() => setNewMessage('Technical support')}
          >
            Technical Support
          </Badge>
        </div>
      </div>

      {/* Support Info Card */}
      <div className="bg-gray-800/30 border-t border-gray-700 p-4">
        <Card className="bg-gray-800/50 border-gray-700">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <h4 className="text-white font-semibold text-sm">Need immediate assistance?</h4>
                <p className="text-gray-400 text-xs">Our support team is available 24/7</p>
              </div>
              <div className="flex space-x-2">
                <Button size="sm" variant="outline" className="border-gray-600 text-gray-300">
                  <Phone className="w-4 h-4 mr-2" />
                  Call
                </Button>
                <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                  <Video className="w-4 h-4 mr-2" />
                  Video Call
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
