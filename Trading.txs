import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { TrendingUp, TrendingDown, DollarSign, BarChart3, Activity, Plus, Minus } from 'lucide-react';
import { toast } from 'sonner';

export default function Trading() {
  const [selectedPair, setSelectedPair] = useState('BTC/USD');
  const [tradeAmount, setTradeAmount] = useState('');
  const [tradeType, setTradeType] = useState<'buy' | 'sell'>('buy');

  const tradingPairs = [
    { pair: 'BTC/USD', price: 48530.25, change: 8.30, changePercent: 0.13, volume: '2.5B' },
    { pair: 'ETH/USD', price: 3245.80, change: 113.40, changePercent: 0.05, volume: '1.8B' },
    { pair: 'ADA/USD', price: 1.25, change: -0.05, changePercent: -3.85, volume: '450M' },
    { pair: 'SOL/USD', price: 185.50, change: 12.30, changePercent: 7.10, volume: '380M' },
    { pair: 'DOT/USD', price: 28.75, change: -1.20, changePercent: -4.00, volume: '220M' },
    { pair: 'LINK/USD', price: 24.80, change: 2.15, changePercent: 9.50, volume: '180M' }
  ];

  const recentTrades = [
    { id: '1', pair: 'BTC/USD', type: 'buy', amount: 0.5, price: 48500, time: '14:32:15', profit: 125.50 },
    { id: '2', pair: 'ETH/USD', type: 'sell', amount: 2.0, price: 3200, time: '14:28:42', profit: -45.20 },
    { id: '3', pair: 'ADA/USD', type: 'buy', amount: 1000, price: 1.20, time: '14:15:33', profit: 50.00 },
    { id: '4', pair: 'SOL/USD', type: 'buy', amount: 10, price: 180, time: '14:05:18', profit: 550.00 }
  ];

  const handleTrade = () => {
    if (!tradeAmount) {
      toast.error('Please enter trade amount');
      return;
    }

    const amount = parseFloat(tradeAmount);
    if (amount <= 0) {
      toast.error('Please enter a valid amount');
      return;
    }

    toast.success(`${tradeType.toUpperCase()} order placed for ${amount} ${selectedPair}`);
    setTradeAmount('');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">Trading Dashboard</h1>
          <p className="text-gray-300">Trade cryptocurrencies with real-time market data</p>
        </div>

        {/* Trading Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="bg-gray-800/50 border-gray-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Portfolio Value</p>
                  <p className="text-2xl font-bold text-white">$125,847.50</p>
                  <p className="text-green-400 text-sm">+2.5% today</p>
                </div>
                <DollarSign className="w-8 h-8 text-blue-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Today's P&L</p>
                  <p className="text-2xl font-bold text-green-400">+$3,245.80</p>
                  <p className="text-green-400 text-sm">+2.65%</p>
                </div>
                <TrendingUp className="w-8 h-8 text-green-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Active Trades</p>
                  <p className="text-2xl font-bold text-white">12</p>
                  <p className="text-blue-400 text-sm">8 profitable</p>
                </div>
                <Activity className="w-8 h-8 text-yellow-400" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm">Win Rate</p>
                  <p className="text-2xl font-bold text-white">78.5%</p>
                  <p className="text-green-400 text-sm">Above average</p>
                </div>
                <BarChart3 className="w-8 h-8 text-purple-400" />
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-3 gap-8">
          {/* Trading Pairs */}
          <Card className="xl:col-span-2 bg-gray-800/50 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white">Market Overview</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {tradingPairs.map((pair, index) => (
                  <div 
                    key={index}
                    className={`p-4 rounded-lg border cursor-pointer transition-all ${
                      selectedPair === pair.pair 
                        ? 'border-blue-500 bg-blue-500/10' 
                        : 'border-gray-600 hover:border-gray-500'
                    }`}
                    onClick={() => setSelectedPair(pair.pair)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                          <span className="text-white font-bold text-sm">{pair.pair.split('/')[0]}</span>
                        </div>
                        <div>
                          <h3 className="text-white font-semibold">{pair.pair}</h3>
                          <p className="text-gray-400 text-sm">Vol: {pair.volume}</p>
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <p className="text-white font-bold text-lg">${pair.price.toLocaleString()}</p>
                        <div className="flex items-center space-x-1">
                          {pair.change >= 0 ? (
                            <TrendingUp className="w-4 h-4 text-green-400" />
                          ) : (
                            <TrendingDown className="w-4 h-4 text-red-400" />
                          )}
                          <span className={pair.change >= 0 ? 'text-green-400' : 'text-red-400'}>
                            {pair.change >= 0 ? '+' : ''}{pair.change} ({pair.changePercent >= 0 ? '+' : ''}{pair.changePercent}%)
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Trading Panel */}
          <div className="space-y-6">
            {/* Trade Execution */}
            <Card className="bg-gray-800/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white">Place Order</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <label className="text-gray-400 text-sm">Trading Pair</label>
                    <div className="mt-1 p-3 bg-gray-700 rounded-lg">
                      <span className="text-white font-medium">{selectedPair}</span>
                    </div>
                  </div>

                  <div className="flex space-x-2">
                    <Button
                      variant={tradeType === 'buy' ? 'default' : 'outline'}
                      className={`flex-1 ${tradeType === 'buy' ? 'bg-green-600 hover:bg-green-700' : 'border-gray-600 text-gray-300'}`}
                      onClick={() => setTradeType('buy')}
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      BUY
                    </Button>
                    <Button
                      variant={tradeType === 'sell' ? 'default' : 'outline'}
                      className={`flex-1 ${tradeType === 'sell' ? 'bg-red-600 hover:bg-red-700' : 'border-gray-600 text-gray-300'}`}
                      onClick={() => setTradeType('sell')}
                    >
                      <Minus className="w-4 h-4 mr-2" />
                      SELL
                    </Button>
                  </div>

                  <div>
                    <label className="text-gray-400 text-sm">Amount</label>
                    <Input
                      type="number"
                      placeholder="Enter amount"
                      value={tradeAmount}
                      onChange={(e) => setTradeAmount(e.target.value)}
                      className="bg-gray-700 border-gray-600 text-white mt-1"
                    />
                  </div>

                  <div className="p-3 bg-gray-700/50 rounded-lg">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-400">Estimated Value:</span>
                      <span className="text-white">
                        ${tradeAmount ? (parseFloat(tradeAmount) * 48530.25).toLocaleString() : '0.00'}
                      </span>
                    </div>
                  </div>

                  <Button 
                    onClick={handleTrade}
                    className={`w-full ${
                      tradeType === 'buy' 
                        ? 'bg-green-600 hover:bg-green-700' 
                        : 'bg-red-600 hover:bg-red-700'
                    }`}
                  >
                    {tradeType === 'buy' ? 'Place Buy Order' : 'Place Sell Order'}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Recent Trades */}
            <Card className="bg-gray-800/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white">Recent Trades</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {recentTrades.map((trade) => (
                    <div key={trade.id} className="p-3 bg-gray-700/50 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <Badge className={trade.type === 'buy' ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'}>
                            {trade.type.toUpperCase()}
                          </Badge>
                          <span className="text-white text-sm font-medium">{trade.pair}</span>
                        </div>
                        <span className="text-gray-400 text-xs">{trade.time}</span>
                      </div>
                      
                      <div className="flex justify-between text-sm">
                        <div>
                          <p className="text-gray-400">Amount: {trade.amount}</p>
                          <p className="text-gray-400">Price: ${trade.price.toLocaleString()}</p>
                        </div>
                        <div className="text-right">
                          <p className={`font-medium ${trade.profit >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                            {trade.profit >= 0 ? '+' : ''}${trade.profit}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
